function asmFunc(global, env, buffer) {
 "almost asm";
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var import$0 = env.putc_js;
 var import$1 = env.__syscall0;
 var import$2 = env.__syscall3;
 var import$3 = env.__syscall1;
 var import$4 = env.__syscall5;
 var import$5 = env.__syscall4;
 var global$0 = 67776;
 var global$1 = 67776;
 var global$2 = 2232;
 function $0() {
  
 }
 
 function $1() {
  var $0 = 0, $1 = 0, $2 = 0;
  $9(1024 | 0) | 0;
  return 0 | 0;
 }
 
 function $2($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
  if (($2 | 0) >= (1 | 0)) {
   $0 = 0;
   label$2 : do {
    $4 = 0;
    $5 = $1 + ($0 << 3 | 0) | 0;
    if (HEAPU32[($5 + 4 | 0) >> 2] | 0) {
     $7 = $5 + 4 | 0;
     $3 = 0;
     label$4 : do {
      import$0(HEAP8[((HEAPU32[$5 >> 2] | 0) + $3 | 0) >> 0] | 0 | 0) | 0;
      $3 = $3 + 1 | 0;
      $4 = HEAPU32[$7 >> 2] | 0;
      if ($3 >>> 0 < $4 >>> 0) continue label$4;
      break label$4;
     } while (1);
    }
    $6 = $4 + $6 | 0;
    $0 = $0 + 1 | 0;
    if (($0 | 0) != ($2 | 0)) continue label$2;
    break label$2;
   } while (1);
   return $6 | 0;
  }
  return 0 | 0;
 }
 
 function $3($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if ($0 >>> 0 >= 4294963201 >>> 0) {
   HEAP32[39 >> 2] = 0 - $0 | 0;
   $0 = 4294967295;
  }
  return $0 | 0;
 }
 
 function $4($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
  $3 = HEAPU32[27 >> 2] | 0;
  if (($3 | 0) != (HEAPU32[($0 + 76 | 0) >> 2] | 0 | 0)) {
   $1 = $0 + 76 | 0;
   $2 = HEAPU32[$1 >> 2] | 0;
   if ($2) {
    $0 = $0 + 80 | 0;
    label$3 : do {
     $16($1 | 0, $0 | 0, $2 | 0, 1 | 0);
     $2 = HEAPU32[$1 >> 2] | 0;
     if ($2) continue label$3;
     break label$3;
    } while (1);
   }
   HEAP32[$1 >> 2] = $3;
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function $5($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $3(import$1(375 | 0) | 0 | 0) | 0;
  HEAP32[($0 + 76 | 0) >> 2] = 0;
  $3(import$1(375 | 0) | 0 | 0) | 0;
  label$1 : {
   if ((HEAPU32[($0 + 80 | 0) >> 2] | 0 | 0) == (0 | 0)) break label$1;
   $0 = $0 + 76 | 0;
   if ((import$2(240 | 0, $0 | 0, 129 | 0, 1 | 0) | 0 | 0) != (4294967258 | 0)) break label$1;
   import$2(240 | 0, $0 | 0, 1 | 0, 1 | 0) | 0;
  };
 }
 
 function $6($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, wasm2asm_i32$0 = 0, wasm2asm_i32$1 = 0;
  $1 = HEAPU8[($0 + 74 | 0) >> 0] | 0;
  HEAP8[($0 + 74 | 0) >> 0] = $1 + 4294967295 | 0 | $1 | 0;
  $1 = HEAPU32[$0 >> 2] | 0;
  if (($1 & 8 | 0 | 0) == (0 | 0)) {
   i64toi32_i32$1 = $0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
   (wasm2asm_i32$0 = i64toi32_i32$1, wasm2asm_i32$1 = 0), ((HEAP8[(wasm2asm_i32$0 + 8 | 0) >> 0] = wasm2asm_i32$1 & 255 | 0, HEAP8[(wasm2asm_i32$0 + 9 | 0) >> 0] = (wasm2asm_i32$1 >>> 8 | 0) & 255 | 0), HEAP8[(wasm2asm_i32$0 + 10 | 0) >> 0] = (wasm2asm_i32$1 >>> 16 | 0) & 255 | 0), HEAP8[(wasm2asm_i32$0 + 11 | 0) >> 0] = (wasm2asm_i32$1 >>> 24 | 0) & 255 | 0;
   $1 = HEAPU32[($0 + 44 | 0) >> 2] | 0;
   HEAP32[($0 + 28 | 0) >> 2] = $1;
   HEAP32[($0 + 20 | 0) >> 2] = $1;
   HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAPU32[($0 + 48 | 0) >> 2] | 0) | 0;
   return 0 | 0;
  }
  HEAP32[$0 >> 2] = $1 | 32 | 0;
  return 4294967295 | 0;
 }
 
 function $7($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, wasm2asm_i32$0 = 0, wasm2asm_i32$1 = 0, wasm2asm_i32$2 = 0;
  if ((HEAPU32[($3 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) $11 = ($4($3 | 0) | 0 | 0) != (0 | 0);
  $5 = Math_imul($2, $1);
  label$2 : {
   label$3 : {
    label$4 : {
     label$6 : {
      $4 = HEAPU32[($3 + 16 | 0) >> 2] | 0;
      if ($4) {
       $6 = HEAPU32[($3 + 20 | 0) >> 2] | 0;
       if (($4 - $6 | 0) >>> 0 >= $5 >>> 0) break label$6;
       break label$4;
      }
      $4 = 0;
      if ($6($3 | 0) | 0) break label$3;
      $6 = HEAPU32[($3 + 20 | 0) >> 2] | 0;
      if (((HEAPU32[($3 + 16 | 0) >> 2] | 0) - $6 | 0) >>> 0 < $5 >>> 0) break label$4;
     };
     label$8 : {
      label$9 : {
       if ((HEAP8[($3 + 75 | 0) >> 0] | 0 | 0) < (0 | 0)) break label$9;
       $9 = $0 + $5 | 0;
       $4 = 0;
       label$10 : do {
        if (($5 + $4 | 0 | 0) == (0 | 0)) break label$9;
        $7 = $9 + $4 | 0;
        $8 = $4 + 4294967295 | 0;
        $4 = $8;
        if ((HEAPU8[($7 + 4294967295 | 0) >> 0] | 0 | 0) != (10 | 0)) continue label$10;
        break label$10;
       } while (1);
       $10 = ($5 + $8 | 0) + 1 | 0;
       $4 = FUNCTION_TABLE_0[(HEAPU32[($3 + 36 | 0) >> 2] | 0) & 3]($3 | 0, $0 | 0, $10 | 0) | 0;
       if ($4 >>> 0 < $10 >>> 0) break label$3;
       $0 = ($9 + $8 | 0) + 1 | 0;
       $6 = HEAPU32[($3 + 20 | 0) >> 2] | 0;
       $84 = $8 ^ 4294967295 | 0;
       break label$8;
      };
      $84 = $5;
     };
     $4 = $84;
     $14($6 | 0, $0 | 0, $4 | 0) | 0;
     $7 = $3 + 20 | 0;
     HEAP32[$7 >> 2] = (HEAPU32[$7 >> 2] | 0) + $4 | 0;
     $4 = $10 + $4 | 0;
     break label$3;
    };
    $4 = FUNCTION_TABLE_0[(HEAPU32[($3 + 36 | 0) >> 2] | 0) & 3]($3 | 0, $0 | 0, $5 | 0) | 0;
   };
   if (($11 | 0) == (0 | 0)) break label$2;
   $5($3 | 0);
  };
  if (($4 | 0) == ($5 | 0)) return (wasm2asm_i32$2 = $1, wasm2asm_i32$0 = $2, wasm2asm_i32$1 = 0, wasm2asm_i32$2 ? wasm2asm_i32$0 : wasm2asm_i32$1) | 0;
  return ($4 >>> 0) / ($1 >>> 0) | 0 | 0;
 }
 
 function $8($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  HEAP8[($2 + 15 | 0) >> 0] = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3 = HEAPU32[($0 + 16 | 0) >> 2] | 0;
     if ($3) {
      $4 = HEAPU32[($0 + 20 | 0) >> 2] | 0;
      if ($4 >>> 0 >= $3 >>> 0) break label$2;
      break label$3;
     }
     $20 = 4294967295;
     if ($6($0 | 0) | 0) break label$1;
     $4 = HEAPU32[($0 + 20 | 0) >> 2] | 0;
     if ($4 >>> 0 >= (HEAPU32[($0 + 16 | 0) >> 2] | 0) >>> 0) break label$2;
    };
    $3 = $1 & 255 | 0;
    if (($3 | 0) == (HEAP8[($0 + 75 | 0) >> 0] | 0 | 0)) break label$2;
    HEAP32[($0 + 20 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $1;
    global$0 = $2 + 16 | 0;
    return $3 | 0;
   };
   $20 = 4294967295;
   if ((FUNCTION_TABLE_0[(HEAPU32[($0 + 36 | 0) >> 2] | 0) & 3]($0 | 0, $2 + 15 | 0 | 0, 1 | 0) | 0 | 0) != (1 | 0)) break label$1;
   $20 = HEAPU8[($2 + 15 | 0) >> 0] | 0;
  };
  $3 = $20;
  global$0 = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function $9($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, wasm2asm_i32$0 = 0, wasm2asm_i32$1 = 0, wasm2asm_i32$2 = 0;
  $1 = HEAPU32[1184 >> 2] | 0;
  if ((HEAPU32[($1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) $2 = $4($1 | 0) | 0;
  label$2 : {
   label$3 : {
    $3 = $15($0 | 0) | 0;
    if (((wasm2asm_i32$2 = ($3 | 0) != ($7($0 | 0, 1 | 0, $3 | 0, $1 | 0) | 0 | 0), wasm2asm_i32$0 = 4294967295, wasm2asm_i32$1 = 0, wasm2asm_i32$2 ? wasm2asm_i32$0 : wasm2asm_i32$1) | 0) >= (0 | 0)) {
     label$5 : {
      if ((HEAPU8[($1 + 75 | 0) >> 0] | 0 | 0) == (10 | 0)) break label$5;
      $0 = HEAPU32[($1 + 20 | 0) >> 2] | 0;
      if ($0 >>> 0 >= (HEAPU32[($1 + 16 | 0) >> 2] | 0) >>> 0) break label$5;
      HEAP32[($1 + 20 | 0) >> 2] = $0 + 1 | 0;
      HEAP8[$0 >> 0] = 10;
      $0 = 0;
      if ($2) break label$3;
      break label$2;
     };
     $0 = ($8($1 | 0, 10 | 0) | 0) >> 31 | 0;
     if (($2 | 0) == (0 | 0)) break label$2;
     break label$3;
    }
    $0 = 4294967295;
    if (($2 | 0) == (0 | 0)) break label$2;
   };
   $5($1 | 0);
  };
  return $0 | 0;
 }
 
 function $10($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2asm_i32$0 = 0;
  return $3(import$3(6 | 0, HEAPU32[($0 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
  return wasm2asm_i32$0 | 0;
 }
 
 function $11($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, wasm2asm_i32$0 = 0, wasm2asm_i32$1 = 0, wasm2asm_i32$2 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $1;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $1 = HEAPU32[($0 + 28 | 0) >> 2] | 0;
  HEAP32[$3 >> 2] = $1;
  $1 = (HEAPU32[($0 + 20 | 0) >> 2] | 0) - $1 | 0;
  HEAP32[($3 + 4 | 0) >> 2] = $1;
  $6 = 2;
  label$1 : {
   label$2 : {
    $7 = $1 + $2 | 0;
    $4 = $3(import$2(146 | 0, HEAPU32[($0 + 60 | 0) >> 2] | 0 | 0, $3 | 0, 2 | 0) | 0 | 0) | 0;
    if (($7 | 0) != ($4 | 0)) {
     $1 = $3;
     $9 = $0 + 60 | 0;
     label$4 : do {
      if (($4 | 0) <= (4294967295 | 0)) break label$2;
      $8 = HEAPU32[($1 + 4 | 0) >> 2] | 0;
      $5 = $4 >>> 0 > $8 >>> 0;
      $1 = (wasm2asm_i32$2 = $5, wasm2asm_i32$0 = $1 + 8 | 0, wasm2asm_i32$1 = $1, wasm2asm_i32$2 ? wasm2asm_i32$0 : wasm2asm_i32$1);
      $8 = $4 - (wasm2asm_i32$2 = $5, wasm2asm_i32$0 = $8, wasm2asm_i32$1 = 0, wasm2asm_i32$2 ? wasm2asm_i32$0 : wasm2asm_i32$1) | 0;
      HEAP32[$1 >> 2] = (HEAPU32[$1 >> 2] | 0) + $8 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = (HEAPU32[($1 + 4 | 0) >> 2] | 0) - $8 | 0;
      $7 = $7 - $4 | 0;
      $6 = $6 - $5 | 0;
      $5 = $3(import$2(146 | 0, HEAPU32[$9 >> 2] | 0 | 0, $1 | 0, $6 | 0) | 0 | 0) | 0;
      $4 = $5;
      if (($7 | 0) != ($5 | 0)) continue label$4;
      break label$4;
     } while (1);
    }
    $1 = HEAPU32[($0 + 44 | 0) >> 2] | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAPU32[($0 + 48 | 0) >> 2] | 0) | 0;
    $4 = $2;
    break label$1;
   };
   i64toi32_i32$1 = $0;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
   (wasm2asm_i32$0 = i64toi32_i32$1, wasm2asm_i32$1 = 0), ((HEAP8[(wasm2asm_i32$0 + 20 | 0) >> 0] = wasm2asm_i32$1 & 255 | 0, HEAP8[(wasm2asm_i32$0 + 21 | 0) >> 0] = (wasm2asm_i32$1 >>> 8 | 0) & 255 | 0), HEAP8[(wasm2asm_i32$0 + 22 | 0) >> 0] = (wasm2asm_i32$1 >>> 16 | 0) & 255 | 0), HEAP8[(wasm2asm_i32$0 + 23 | 0) >> 0] = (wasm2asm_i32$1 >>> 24 | 0) & 255 | 0;
   $4 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = HEAPU32[$0 >> 2] | 0 | 32 | 0;
   if (($6 | 0) == (2 | 0)) break label$1;
   $1 = HEAPU32[($1 + 4 | 0) >> 2] | 0;
   global$0 = $3 + 16 | 0;
   return $2 - $1 | 0 | 0;
  };
  global$0 = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function $12($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[($0 + 36 | 0) >> 2] = 1;
  label$1 : {
   if ((HEAPU8[$0 >> 0] | 0) & 64 | 0) break label$1;
   if ((import$2(54 | 0, HEAPU32[($0 + 60 | 0) >> 2] | 0 | 0, 21523 | 0, $3 + 8 | 0 | 0) | 0 | 0) == (0 | 0)) break label$1;
   HEAP8[($0 + 75 | 0) >> 0] = 255;
  };
  $0 = $11($0 | 0, $1 | 0, $2 | 0) | 0;
  global$0 = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function $13($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, wasm2asm_i32$0 = 0, wasm2asm_i32$1 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  $14 = HEAPU32[($0 + 60 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $48 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $48 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$1 = $1$hi;
  if (($3(import$4(140 | 0, $14 | 0, $48 | 0, $1 | 0, $2 + 8 | 0 | 0, $1$hi | 0) | 0 | 0) | 0 | 0) >= (0 | 0)) {
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = (wasm2asm_i32$0 = i64toi32_i32$2, HEAPU8[(wasm2asm_i32$0 + 12 | 0) >> 0] | 0 | 0 | (HEAPU8[(wasm2asm_i32$0 + 13 | 0) >> 0] | 0 | 0) << 8 | (HEAPU8[(wasm2asm_i32$0 + 14 | 0) >> 0] | 0 | 0) << 16 | (HEAPU8[(wasm2asm_i32$0 + 15 | 0) >> 0] | 0 | 0) << 24);
   $1 = HEAPU32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   $1$hi = i64toi32_i32$1;
   global$0 = $2 + 16 | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$2 | 0;
  }
  i64toi32_i32$1 = $2;
  i64toi32_i32$2 = 4294967295;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 4294967295;
  (wasm2asm_i32$0 = i64toi32_i32$1, wasm2asm_i32$1 = i64toi32_i32$2), ((HEAP8[(wasm2asm_i32$0 + 12 | 0) >> 0] = wasm2asm_i32$1 & 255 | 0, HEAP8[(wasm2asm_i32$0 + 13 | 0) >> 0] = (wasm2asm_i32$1 >>> 8 | 0) & 255 | 0), HEAP8[(wasm2asm_i32$0 + 14 | 0) >> 0] = (wasm2asm_i32$1 >>> 16 | 0) & 255 | 0), HEAP8[(wasm2asm_i32$0 + 15 | 0) >> 0] = (wasm2asm_i32$1 >>> 24 | 0) & 255 | 0;
  global$0 = $2 + 16 | 0;
  i64toi32_i32$2 = 4294967295;
  i64toi32_i32$1 = 4294967295;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$1 | 0;
 }
 
 function $14($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $520 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((($2 | 0) == (0 | 0) | ($1 & 3 | 0 | 0) == (0 | 0) | 0 | 0) == (0 | 0)) {
      $3 = $0;
      label$5 : {
       label$6 : do {
        HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
        $4 = $2 + 4294967295 | 0;
        $3 = $3 + 1 | 0;
        $1 = $1 + 1 | 0;
        if (($2 | 0) == (1 | 0)) break label$5;
        $2 = $4;
        if ($1 & 3 | 0) continue label$6;
        break label$6;
       } while (1);
      };
      if (($3 & 3 | 0 | 0) == (0 | 0)) break label$3;
      break label$2;
     }
     $4 = $2;
     $3 = $0;
     if ($3 & 3 | 0) break label$2;
    };
    label$7 : {
     label$8 : {
      if ($4 >>> 0 >= 16 >>> 0) {
       $6 = $4 + 4294967280 | 0;
       $7 = $6 & 4294967280 | 0;
       $8 = $7 + 16 | 0;
       $5 = $3 + $8 | 0;
       $2 = $1;
       label$10 : do {
        HEAP32[$3 >> 2] = HEAPU32[$2 >> 2] | 0;
        HEAP32[($3 + 4 | 0) >> 2] = HEAPU32[($2 + 4 | 0) >> 2] | 0;
        HEAP32[($3 + 8 | 0) >> 2] = HEAPU32[($2 + 8 | 0) >> 2] | 0;
        HEAP32[($3 + 12 | 0) >> 2] = HEAPU32[($2 + 12 | 0) >> 2] | 0;
        $3 = $3 + 16 | 0;
        $2 = $2 + 16 | 0;
        $4 = $4 + 4294967280 | 0;
        if ($4 >>> 0 > 15 >>> 0) continue label$10;
        break label$10;
       } while (1);
       $1 = $1 + $8 | 0;
       $3 = 8;
       $4 = $6 - $7 | 0;
       if ($4 & 8 | 0) break label$8;
       break label$7;
      }
      $5 = $3;
      $3 = 8;
      if (($4 & 8 | 0 | 0) == (0 | 0)) break label$7;
     };
     HEAP32[$5 >> 2] = HEAPU32[$1 >> 2] | 0;
     HEAP32[($5 + 4 | 0) >> 2] = HEAPU32[($1 + 4 | 0) >> 2] | 0;
     $1 = $1 + $3 | 0;
     $5 = $5 + $3 | 0;
    };
    label$11 : {
     label$12 : {
      label$13 : {
       if (($4 & 4 | 0 | 0) == (0 | 0)) {
        $3 = 2;
        if ($4 & 2 | 0) break label$13;
        break label$12;
       }
       HEAP32[$5 >> 2] = HEAPU32[$1 >> 2] | 0;
       $1 = $1 + 4 | 0;
       $5 = $5 + 4 | 0;
       $3 = 2;
       if (($4 & 2 | 0 | 0) == (0 | 0)) break label$12;
      };
      HEAP8[$5 >> 0] = HEAPU8[$1 >> 0] | 0;
      HEAP8[($5 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
      $5 = $5 + $3 | 0;
      $1 = $1 + $3 | 0;
      if ($4 & 1 | 0) break label$11;
      break label$1;
     };
     if (($4 & 1 | 0 | 0) == (0 | 0)) break label$1;
    };
    HEAP8[$5 >> 0] = HEAPU8[$1 >> 0] | 0;
    return $0 | 0;
   };
   label$15 : {
    label$16 : {
     label$17 : {
      label$18 : {
       label$19 : {
        label$20 : {
         label$21 : {
          label$22 : {
           label$23 : {
            label$24 : {
             label$25 : {
              label$26 : {
               if ($4 >>> 0 < 32 >>> 0) break label$26;
               $2 = $3 & 3 | 0;
               if (($2 | 0) == (3 | 0)) break label$25;
               if (($2 | 0) == (2 | 0)) break label$24;
               if (($2 | 0) != (1 | 0)) break label$26;
               HEAP8[($3 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
               $6 = HEAPU32[$1 >> 2] | 0;
               HEAP8[$3 >> 0] = $6;
               HEAP8[($3 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
               $2 = $1 + 16 | 0;
               $8 = $4 + 4294967277 | 0;
               $7 = $4 + 4294967293 | 0;
               $5 = $3 + 3 | 0;
               $9 = ($4 + 4294967276 | 0) & 4294967280 | 0;
               $10 = $9 + 19 | 0;
               $1 = $1 + $10 | 0;
               label$27 : do {
                $4 = HEAPU32[($2 + 4294967284 | 0) >> 2] | 0;
                HEAP32[$5 >> 2] = $4 << 8 | 0 | ($6 >>> 24 | 0) | 0;
                $6 = HEAPU32[($2 + 4294967288 | 0) >> 2] | 0;
                HEAP32[($5 + 4 | 0) >> 2] = $6 << 8 | 0 | ($4 >>> 24 | 0) | 0;
                $4 = HEAPU32[($2 + 4294967292 | 0) >> 2] | 0;
                HEAP32[($5 + 8 | 0) >> 2] = $4 << 8 | 0 | ($6 >>> 24 | 0) | 0;
                $6 = HEAPU32[$2 >> 2] | 0;
                HEAP32[($5 + 12 | 0) >> 2] = $6 << 8 | 0 | ($4 >>> 24 | 0) | 0;
                $5 = $5 + 16 | 0;
                $2 = $2 + 16 | 0;
                $7 = $7 + 4294967280 | 0;
                if ($7 >>> 0 > 16 >>> 0) continue label$27;
                break label$27;
               } while (1);
               $4 = $8 - $9 | 0;
               $3 = $3 + $10 | 0;
              };
              $2 = 16;
              if ($4 & 16 | 0) break label$23;
              break label$22;
             };
             $6 = HEAPU32[$1 >> 2] | 0;
             HEAP8[$3 >> 0] = $6;
             $2 = $1 + 16 | 0;
             $8 = $4 + 4294967279 | 0;
             $7 = $4 + 4294967295 | 0;
             $5 = $3 + 1 | 0;
             $9 = ($4 + 4294967276 | 0) & 4294967280 | 0;
             $10 = $9 + 17 | 0;
             $1 = $1 + $10 | 0;
             label$28 : do {
              $4 = HEAPU32[($2 + 4294967284 | 0) >> 2] | 0;
              HEAP32[$5 >> 2] = $4 << 24 | 0 | ($6 >>> 8 | 0) | 0;
              $6 = HEAPU32[($2 + 4294967288 | 0) >> 2] | 0;
              HEAP32[($5 + 4 | 0) >> 2] = $6 << 24 | 0 | ($4 >>> 8 | 0) | 0;
              $4 = HEAPU32[($2 + 4294967292 | 0) >> 2] | 0;
              HEAP32[($5 + 8 | 0) >> 2] = $4 << 24 | 0 | ($6 >>> 8 | 0) | 0;
              $6 = HEAPU32[$2 >> 2] | 0;
              HEAP32[($5 + 12 | 0) >> 2] = $6 << 24 | 0 | ($4 >>> 8 | 0) | 0;
              $5 = $5 + 16 | 0;
              $2 = $2 + 16 | 0;
              $7 = $7 + 4294967280 | 0;
              if ($7 >>> 0 > 18 >>> 0) continue label$28;
              break label$28;
             } while (1);
             $3 = $3 + $10 | 0;
             $2 = 16;
             $4 = $8 - $9 | 0;
             if (($4 & 16 | 0 | 0) == (0 | 0)) break label$22;
             break label$23;
            };
            $6 = HEAPU32[$1 >> 2] | 0;
            HEAP8[$3 >> 0] = $6;
            HEAP8[($3 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
            $2 = $1 + 16 | 0;
            $8 = $4 + 4294967278 | 0;
            $7 = $4 + 4294967294 | 0;
            $5 = $3 + 2 | 0;
            $9 = ($4 + 4294967276 | 0) & 4294967280 | 0;
            $10 = $9 + 18 | 0;
            $1 = $1 + $10 | 0;
            label$29 : do {
             $4 = HEAPU32[($2 + 4294967284 | 0) >> 2] | 0;
             HEAP32[$5 >> 2] = $4 << 16 | 0 | ($6 >>> 16 | 0) | 0;
             $6 = HEAPU32[($2 + 4294967288 | 0) >> 2] | 0;
             HEAP32[($5 + 4 | 0) >> 2] = $6 << 16 | 0 | ($4 >>> 16 | 0) | 0;
             $4 = HEAPU32[($2 + 4294967292 | 0) >> 2] | 0;
             HEAP32[($5 + 8 | 0) >> 2] = $4 << 16 | 0 | ($6 >>> 16 | 0) | 0;
             $6 = HEAP32[$2 >> 2] | 0;
             HEAP32[($5 + 12 | 0) >> 2] = $6 << 16 | 0 | ($4 >>> 16 | 0) | 0;
             $5 = $5 + 16 | 0;
             $2 = $2 + 16 | 0;
             $7 = $7 + 4294967280 | 0;
             if ($7 >>> 0 > 17 >>> 0) continue label$29;
             break label$29;
            } while (1);
            $3 = $3 + $10 | 0;
            $2 = 16;
            $4 = $8 - $9 | 0;
            if (($4 & 16 | 0 | 0) == (0 | 0)) break label$22;
           };
           HEAP8[($3 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
           HEAP8[($3 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
           HEAP8[($3 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
           HEAP8[($3 + 4 | 0) >> 0] = HEAPU8[($1 + 4 | 0) >> 0] | 0;
           HEAP8[($3 + 5 | 0) >> 0] = HEAPU8[($1 + 5 | 0) >> 0] | 0;
           HEAP8[($3 + 6 | 0) >> 0] = HEAPU8[($1 + 6 | 0) >> 0] | 0;
           HEAP8[($3 + 7 | 0) >> 0] = HEAPU8[($1 + 7 | 0) >> 0] | 0;
           HEAP8[($3 + 8 | 0) >> 0] = HEAPU8[($1 + 8 | 0) >> 0] | 0;
           HEAP8[($3 + 9 | 0) >> 0] = HEAPU8[($1 + 9 | 0) >> 0] | 0;
           HEAP8[($3 + 10 | 0) >> 0] = HEAPU8[($1 + 10 | 0) >> 0] | 0;
           HEAP8[($3 + 11 | 0) >> 0] = HEAPU8[($1 + 11 | 0) >> 0] | 0;
           HEAP8[($3 + 12 | 0) >> 0] = HEAPU8[($1 + 12 | 0) >> 0] | 0;
           HEAP8[($3 + 13 | 0) >> 0] = HEAPU8[($1 + 13 | 0) >> 0] | 0;
           HEAP8[($3 + 14 | 0) >> 0] = HEAPU8[($1 + 14 | 0) >> 0] | 0;
           HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
           HEAP8[($3 + 15 | 0) >> 0] = HEAPU8[($1 + 15 | 0) >> 0] | 0;
           $3 = $3 + $2 | 0;
           $1 = $1 + $2 | 0;
           $2 = 8;
           if (($4 & 8 | 0 | 0) == (0 | 0)) break label$21;
           break label$20;
          };
          $2 = 8;
          if ($4 & 8 | 0) break label$20;
         };
         $2 = 4;
         if ($4 & 4 | 0) break label$19;
         break label$18;
        };
        HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
        HEAP8[($3 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
        HEAP8[($3 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
        HEAP8[($3 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
        HEAP8[($3 + 4 | 0) >> 0] = HEAPU8[($1 + 4 | 0) >> 0] | 0;
        HEAP8[($3 + 5 | 0) >> 0] = HEAPU8[($1 + 5 | 0) >> 0] | 0;
        HEAP8[($3 + 6 | 0) >> 0] = HEAPU8[($1 + 6 | 0) >> 0] | 0;
        HEAP8[($3 + 7 | 0) >> 0] = HEAPU8[($1 + 7 | 0) >> 0] | 0;
        $3 = $3 + $2 | 0;
        $1 = $1 + $2 | 0;
        $2 = 4;
        if (($4 & 4 | 0 | 0) == (0 | 0)) break label$18;
       };
       HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
       HEAP8[($3 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
       HEAP8[($3 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
       HEAP8[($3 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
       $3 = $3 + $2 | 0;
       $1 = $1 + $2 | 0;
       $2 = 2;
       if (($4 & 2 | 0 | 0) == (0 | 0)) break label$17;
       break label$16;
      };
      $2 = 2;
      if ($4 & 2 | 0) break label$16;
     };
     if ($4 & 1 | 0) break label$15;
     break label$1;
    };
    HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
    HEAP8[($3 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $3 = $3 + $2 | 0;
    $1 = $1 + $2 | 0;
    if (($4 & 1 | 0 | 0) == (0 | 0)) break label$1;
   };
   HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
  };
  return $0 | 0;
 }
 
 function $15($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
  $1 = $0;
  label$1 : {
   label$2 : {
    if ($0 & 3 | 0) label$4 : do {
     if ((HEAPU8[$1 >> 0] | 0 | 0) == (0 | 0)) break label$2;
     $1 = $1 + 1 | 0;
     if ($1 & 3 | 0) continue label$4;
     break label$4;
    } while (1);
    $2 = $1 + 4294967292 | 0;
    label$5 : do {
     $2 = $2 + 4 | 0;
     $1 = HEAPU32[$2 >> 2] | 0;
     if (((($1 ^ 4294967295 | 0) & ($1 + 4278124287 | 0) | 0) & 2155905152 | 0 | 0) == (0 | 0)) continue label$5;
     break label$5;
    } while (1);
    if (($1 & 255 | 0 | 0) == (0 | 0)) break label$1;
    label$6 : do {
     $3 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
     $1 = $2 + 1 | 0;
     $2 = $1;
     if ($3) continue label$6;
     break label$6;
    } while (1);
   };
   return $1 - $0 | 0 | 0;
  };
  return $2 - $0 | 0 | 0;
 }
 
 function $16($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, wasm2asm_i32$0 = 0, wasm2asm_i32$1 = 0, wasm2asm_i32$2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if ($1) {
         $4 = 4294967196;
         label$8 : do {
          if (HEAPU32[$1 >> 2] | 0) break label$5;
          if ((HEAPU32[$0 >> 2] | 0 | 0) != ($2 | 0)) break label$1;
          $3(import$1(375 | 0) | 0 | 0) | 0;
          $4 = $4 + 1 | 0;
          if ($4) continue label$8;
          break label$6;
          break label$8;
         } while (1);
        }
        $4 = 4294967196;
        label$9 : do {
         if ((HEAPU32[$0 >> 2] | 0 | 0) != ($2 | 0)) break label$1;
         $3(import$1(375 | 0) | 0 | 0) | 0;
         $4 = $4 + 1 | 0;
         if ($4) continue label$9;
         break label$9;
        } while (1);
       };
       if (($1 | 0) == (0 | 0)) break label$4;
      };
      label$10 : do {
       $4 = HEAPU32[$1 >> 2] | 0;
       if (($4 | 0) != (HEAPU32[$1 >> 2] | 0 | 0)) continue label$10;
       break label$10;
      } while (1);
      $5 = 1;
      HEAP32[$1 >> 2] = $4 + 1 | 0;
      if ((HEAPU32[$0 >> 2] | 0 | 0) == ($2 | 0)) break label$3;
      break label$2;
     };
     if ((HEAPU32[$0 >> 2] | 0 | 0) != ($2 | 0)) break label$2;
    };
    $4 = (wasm2asm_i32$2 = $3, wasm2asm_i32$0 = 128, wasm2asm_i32$1 = 0, wasm2asm_i32$2 ? wasm2asm_i32$0 : wasm2asm_i32$1);
    label$11 : do {
     if ((import$5(240 | 0, $0 | 0, $4 | 0, $2 | 0, 0 | 0) | 0 | 0) == (4294967258 | 0)) import$5(240 | 0, $0 | 0, 0 | 0, $2 | 0, 0 | 0) | 0;
     if ((HEAPU32[$0 >> 2] | 0 | 0) == ($2 | 0)) continue label$11;
     break label$11;
    } while (1);
   };
   if (($5 | 0) == (0 | 0)) break label$1;
   label$13 : do {
    $2 = HEAPU32[$1 >> 2] | 0;
    if (($2 | 0) != (HEAPU32[$1 >> 2] | 0 | 0)) continue label$13;
    break label$13;
   } while (1);
   HEAP32[$1 >> 2] = $2 + 4294967295 | 0;
  };
 }
 
 function __wasm_ctz_i32(x) {
  x = x | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  if ((x | 0) == (0 | 0)) $9 = 32; else $9 = 31 - Math_clz32(x ^ (x - 1 | 0) | 0) | 0;
  return $9 | 0;
 }
 
 function __wasm_popcnt_i32(x) {
  x = x | 0;
  var count = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  count = 0;
  b : {
   l : do {
    $5 = count;
    if ((x | 0) == (0 | 0)) break b;
    x = x & (x - 1 | 0) | 0;
    count = count + 1 | 0;
    continue l;
    break l;
   } while (1);
  };
  return $5 | 0;
 }
 
 function __wasm_rotl_i32(x, k) {
  x = x | 0;
  k = k | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, wasm2asm_i32$0 = 0;
  return ((4294967295 >>> (k & 31 | 0) | 0) & x | 0) << (k & 31 | 0) | 0 | (((4294967295 << (32 - (k & 31 | 0) | 0) | 0) & x | 0) >>> (32 - (k & 31 | 0) | 0) | 0) | 0 | 0;
  return wasm2asm_i32$0 | 0;
 }
 
 function __wasm_rotr_i32(x, k) {
  x = x | 0;
  k = k | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, wasm2asm_i32$0 = 0;
  return ((4294967295 << (k & 31 | 0) | 0) & x | 0) >>> (k & 31 | 0) | 0 | (((4294967295 >>> (32 - (k & 31 | 0) | 0) | 0) & x | 0) << (32 - (k & 31 | 0) | 0) | 0) | 0 | 0;
  return wasm2asm_i32$0 | 0;
 }
 
 var FUNCTION_TABLE_ii = [$10, $10, $10, $10];
 var FUNCTION_TABLE_iiii = [$11, $11, $12, $11];
 var FUNCTION_TABLE_iiiii = [$13, $13, $13, $13];
 function __wasm_grow_memory(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_current_memory() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65535)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
  }
  return oldPages;
 }
 
 function __wasm_current_memory() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  memory: Object.create(Object.prototype, {
   grow: {
    value: __wasm_grow_memory
   }, 
   buffer: {
    get: function () {
     return buffer;
    }
    
   }
  }), 
  _start: $0, 
  main: $1, 
  writev_c: $2
 };
}
