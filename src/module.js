//constants for colors
const BLACK = 0x000000;
const WHITE = 0xFFFFFF;
const BLUE = 0x0000FF;
const RED = 0xFF0001;

const IMAGE = [0x000000, 0x000000, 0x130e13, 0x141114, 0x140f14, 0x240024, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x141414, 0x1a0d0d, 0x000000, 0x000000, 0x170c17, 0x1a1a1a, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0f0f0f, 0x0f0f0f, 0x000000, 0x000000, 0x000000, 0x171717, 0x151013, 0x171115, 0x161114, 0x171115, 0x161016, 0x151113, 0x151013, 0x000000, 0x131313, 0x150e15, 0x000000, 0x161112, 0x141013, 0x000000, 0x150b15, 0x150f13, 0x141014, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x151012, 0x151013, 0x000000, 0x000000, 0x000000, 0x161014, 0x181215, 0x160f14, 0x131313, 0x171212, 0x000000, 0x151013, 0x161013, 0x000000, 0x151014, 0x151013, 0x000000, 0x151013, 0x151013, 0x000000, 0x2b0000, 0x161114, 0x141012, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x141013, 0x151013, 0x000000, 0x000000, 0x000000, 0x151013, 0x151113, 0x000000, 0x170c17, 0x160f16, 0x240024, 0x141012, 0x161114, 0x141012, 0x151013, 0x151013, 0x141112, 0x140f13, 0x151013, 0x151113, 0x151013, 0x161114, 0x151113, 0x141013, 0x141113, 0x000000, 0x150f13, 0x161113, 0x151012, 0x151013, 0x141013, 0x151013, 0x151015, 0x151013, 0x161013, 0x000000, 0x151013, 0x181216, 0x150f13, 0x151013, 0x151013, 0x161013, 0x151013, 0x161013, 0x160f12, 0x161112, 0x161114, 0x151013, 0x151013, 0x161114, 0x150f13, 0x151013, 0x151013, 0x000000, 0x161114, 0x151013, 0x150f14,
0x151013, 0x150f12, 0x151013, 0x151014, 0x150f13, 0x151013, 0x000000, 0x191010, 0x161013, 0x161014, 0x161112, 0x151013, 0x000000, 0x151013, 0x160f12, 0x000000, 0x151114, 0x151013, 0x000000, 0x131313, 0x161013, 0x151113, 0x151013, 0x151112, 0x000000, 0x150f13, 0x150f13, 0x151013, 0x151013, 0x000000, 0x141013, 0x151013, 0x151113, 0x181216, 0x161112, 0x151212, 0x161013, 0x140f13, 0x141013, 0x151013, 0x000000, 0x141013, 0x151113, 0x151515, 0x151114, 0x151013, 0x000000, 0x1a0d1a, 0x161114, 0x141012, 0x151113, 0x151013, 0x130e13, 0x161114, 0x151113, 0x151013, 0x151013, 0x181212, 0x151013, 0x150f13, 0x000000, 0x161014, 0x151013, 0x161114, 0x151013, 0x141114, 0x161014, 0x151014, 0x000000, 0x160f14, 0x161114, 0x141013, 0x150f13, 0x150f13, 0x000000, 0x180c18, 0x161013, 0x151012, 0x141012, 0x161114, 0x151013, 0x151013, 0x151113, 0x151014, 0x151013, 0x151013, 0x151013, 0x141014, 0x000000, 0x000000, 0x1a1a1a, 0x121212, 0x171717, 0x000000, 0x000000, 0x240024, 0x000000, 0x000000, 0x180c18, 0x121212, 0x000000, 0x202020, 0x000000, 0x000000, 0x1c1c1c, 0x000000, 0x000000, 0x141414, 0x111111, 0x000000, 0x000000, 0x000000, 0x000000, 0x1a0d1a, 0x101010, 0x000000];

const WIDTH = 28;
const HEIGHT = 9;

function drawFrame(frame) {

  for (let y = 0; y < frame.height; y++) {
    for (let x = 0; x < frame.width; x++) {

      let color = BLUE;

      if (y < HEIGHT && x < WIDTH) {
        color = IMAGE[WIDTH * y + x];
      }

      frame.color = color;
      frame.setPixel(x, y);
    }
  }

/*
  for (let i = 0; i < IMAGE.length; i++) {

    frame.color = IMAGE[i];

    let y = i % HEIGHT;
    let x = Math.floor(i % HEIGHT);
    frame.setPixel(x, y);
  }  
*/

}

class Frame {
    constructor(buffer, rows, cols, frameNumber) {
        this.color = BLUE
        this.width = cols
        this.height = rows
        this.frameNumber = frameNumber
        this.frameSize = 3 * rows * cols
        //data is a ref to just the slice of the buffer for this frame
        this.data = new Uint8Array(buffer, this.frameSize*this.frameNumber, this.frameSize)
        for(let i=0; i<rows*cols; i++) {
            const R = (this.color & 0xFF0000) >> 16
            const G = (this.color & 0x00FF00) >> 8
            const B = (this.color & 0x0000FF) >> 0
            this.data[i*3+0] = R;
            this.data[i*3+1] = G;
            this.data[i*3+2] = B;
        }

        this.color = RED
        this.setPixel(0,0)
    }

    setPixel(x,y) {
        let n = (y*this.width+x)*3
        this.data[n+0] = (this.color & 0xFF0000) >> 16;
        this.data[n+1] = (this.color & 0x00FF00) >> 8;
        this.data[n+2] = (this.color & 0x0000FF) >> 0;
    }
}

}


export function transform(buffer, rows, cols, frameCount, fps, isFirst) {
    for (let i = 0; i < frameCount; i++) drawFrame(new Frame(buffer, rows, cols, i))
}

export default function () {
    return Promise.resolve({
        transform,
    })
}
