# Sets the minimum version of CMake required to build your native library.
# This ensures that a certain set of CMake features is available to
# your build.

cmake_minimum_required(VERSION 3.4.1)

set(distribution_DIR ${CMAKE_SOURCE_DIR}/../jniLibs)
# Specifies a library name, specifies whether the library is STA# Sets the minimum version of CMake required to build your native library.
# This ensures that a certain set of CMake features is available to
# your build.

cmake_minimum_required(VERSION 3.4.1)

set(distribution_DIR ${CMAKE_SOURCE_DIR}/../jniLibs)
# Specifies a library name, specifies whether the library is STATIC or
# SHARED, and provides relative paths to the source code. You can
# define multiple libraries by adding multiple add.library() commands,
# and CMake builds them for you. When you build your app, Gradle
# automatically packages shared libraries with your APK.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++03")
add_library( # Specifies the name of the library.
             PiEncrypt

             # Sets the library as a shared library.
             SHARED

             # Provides a relative path to your source file(s).
             com_pi_pilocker_piencryptfiles_libPiEncrypt_jni.cpp
             PiEncrypt.cpp
             CFileEncrypt.cpp
             FileHead.cpp
             Rijndael.cpp
             EncIniFile.cpp
             EncryptMgr.cpp
             FileUtil.cpp
             KeyFileHelper.cpp
             KeyUtil.cpp
             SeriesNum.cpp
             TimeFunc.cpp
             EncM_Rijndael.cpp
             EncM_Des.cpp
             EncM_SM4.cpp
             WjcDes.cpp
             pencode.cpp
             SoBind.cpp
             CHardInfo.cpp
             )
# Specifies a path to native header files.
include_directories(src/main/jni)
set_target_properties(PiEncrypt PROPERTIES LINKER_LANGUAGE CXX)
set(CMAKE_BUILD_TYPE "Debug")
target_link_libraries(PiEncrypt)
link_libraries(iconv)


# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
              log-lib

              # Specifies the name of the NDK library that
              # you want CMake to locate.
              log )

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.

target_link_libraries( # Specifies the target library.
                       PiEncrypt

                       # Links the target library to the log library
                       # included in the NDK.
                       ${log-lib} )