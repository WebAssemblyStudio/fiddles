'\" t
.\"     Title: get_int
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 1.5.7.1
.\"      Date: 2017-09-16
.\"    Manual: CS50 Programmer's Manual
.\"    Source: CS50
.\"  Language: English
.\"
.TH "GET_INT" "3" "2017-09-16" "CS50" "CS50 Programmer\(aqs Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
get_int \- prompts user for a line of text from stdin and returns the equivalent int
.SH "SYNOPSIS"
.sp
\fB#include <cs50.h>\fP
.sp
\fBint get_int(const char *format, ...);\fP
.SH "DESCRIPTION"
.sp
Prompts user for a line of text from standard input and returns the equivalent int; if text does not represent an int or would cause overflow, user is reprompted.
.sp
The prompt is formatted like \fBprintf(3)\fP.
.SH "RETURN VALUE"
.sp
Returns the int equivalent to the line read from stdin in [\fBINT_MIN\fP, \fBINT_MAX\fP). If line can\(cqt be read, returns \fBINT_MAX\fP.
.SH "EXAMPLE"
.sp
.if n .RS 4
.nf
/**
 * Returns the sum of two ints read from stdin, or INT_MAX if there was an error.
 */
int add_ints(void)
{
    // read int from stdin
    int i = get_int("Enter an int: ");

    // make sure we read one successfully
    if (i == INT_MAX)
    {
        return INT_MAX;
    }

    int j = get_int("What do you want to add %d to? ", i);

    if (j == INT_MAX)
    {
        return INT_MAX;
    }

    return i + j;
}
.fi
.if n .RE
.SH "SEE ALSO"
.sp
.if n .RS 4
.nf
get_char(3), get_double(3), get_float(3), get_long(3),
get_string(3), printf(3)
.fi
.if n .RE