'\" t
.\"     Title: get_float
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 1.5.7.1
.\"      Date: 2017-09-16
.\"    Manual: CS50 Programmer's Manual
.\"    Source: CS50
.\"  Language: English
.\"
.TH "GET_FLOAT" "3" "2017-09-16" "CS50" "CS50 Programmer\(aqs Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
get_float \- prompts user for a line of text from stdin and returns the equivalent float
.SH "SYNOPSIS"
.sp
\fB#include <cs50.h>\fP
.sp
\fBfloat get_float(const char *format, ...);\fP
.SH "DESCRIPTION"
.sp
Prompts user for a line of text from standard input and returns the equivalent float as precisely as possible; if text does not represent a float or would cause underflow or overflow, user is reprompted.
.sp
The prompt is formatted like \fBprintf(3)\fP.
.SH "RETURN VALUE"
.sp
Returns the float equivalent to the line read from stdin in [\fBFLT_MIN\fP, \fBFLT_MAX\fP), as precisely as possible. If line can\(cqt be read, returns \fBFLT_MAX\fP.
.SH "EXAMPLE"
.sp
.if n .RS 4
.nf
/**
 * Returns the product of two floats, or FLT_MAX on error.
 */
float multiply_floats(void)
{
    // read float from stdin
    float f = get_float("Enter a float: ");

    // make sure we read one successfully
    if (f == FLT_MAX)
    {
        return FLT_MAX;
    }

    float g = get_float("What do you want to multiply %f by? ", f);

    if (g == FLT_MAX)
    {
        return FLT_MAX;
    }

    return i * j;
}
.fi
.if n .RE
.SH "SEE ALSO"
.sp
.if n .RS 4
.nf
get_char(3), get_double(3), get_int(3), get_long(3),
get_string(3)
.fi
.if n .RE