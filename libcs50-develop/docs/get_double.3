'\" t
.\"     Title: get_double
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 1.5.7.1
.\"      Date: 2017-09-16
.\"    Manual: CS50 Programmer's Manual
.\"    Source: CS50
.\"  Language: English
.\"
.TH "GET_DOUBLE" "3" "2017-09-16" "CS50" "CS50 Programmer\(aqs Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
get_double \- prompts user for a line of text from stdin and returns the equivalent double
.SH "SYNOPSIS"
.sp
\fB#include <cs50.h>\fP
.sp
\fBdouble get_double(const char *format, ...);\fP
.SH "DESCRIPTION"
.sp
Prompts user for a line of text from standard input and returns the equivalent double as precisely as possible; if text does not represent a double or would cause underflow or overflow, user is reprompted.
.sp
The prompt is formatted like \fBprintf(3)\fP.
.SH "RETURN VALUE"
.sp
Returns the double equivalent to the line read from stdin in [\fBDBL_MIN\fP, \fBDBL_MAX\fP), as precisely as possible. If line can\(cqt be read, returns \fBDBL_MAX\fP.
.SH "EXAMPLE"
.sp
.if n .RS 4
.nf
/**
 * Returns the quotient of two doubles, or DBL_MAX on error.
 */
double divide_doubles(void)
{
    // read double from stdin
    double d = get_double("Enter a double: ");

    // make sure we read one successfully
    if (d == DBL_MAX)
    {
        return DBL_MAX;
    }

    double e = get_double("What do you want to divide %lf by? ", d);

    // make sure we don\(aqt divide by zero
    if (e == DBL_MAX || e == 0.0)
    {
        return DBL_MAX;
    }

    return i / j;
}
.fi
.if n .RE
.SH "SEE ALSO"
.sp
.if n .RS 4
.nf
get_char(3), get_float(3), get_int(3), get_long(3),
get_string(3), printf(3)
.fi
.if n .RE