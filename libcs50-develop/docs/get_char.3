'\" t
.\"     Title: get_char
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 1.5.7.1
.\"      Date: 2017-09-16
.\"    Manual: CS50 Programmer's Manual
.\"    Source: CS50
.\"  Language: English
.\"
.TH "GET_CHAR" "3" "2017-09-16" "CS50" "CS50 Programmer\(aqs Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
get_char \- prompts user for a line of text from stdin and returns the equivalent char
.SH "SYNOPSIS"
.sp
\fB#include <cs50.h>\fP
.sp
\fBchar get_char(const char *format, ...);\fP
.SH "DESCRIPTION"
.sp
Prompts user for a line of text from standard input and returns the equivalent char; if text is not a single char, user is reprompted.
.sp
The prompt is formatted like \fBprintf(3)\fP.
.SH "RETURN VALUE"
.sp
Returns char equivalent to the line read from stdin. If line can\(cqt be read, returns \fBCHAR_MAX\fP.
.SH "EXAMPLE"
.sp
.if n .RS 4
.nf
int main(void)
{
    // attempt to read character from stdin
    char c = get_char("Enter char: ");

    // ensure character was read successfully
    if (c == CHAR_MAX)
    {
        return 1;
    }

    char next = get_char("You just entered %c. Enter another char: ", c);

    if (next == CHAR_MAX)
    {
        return 1;
    }

    printf("The last char you entered was %c\(rsn", next);
}
.fi
.if n .RE
.SH "SEE ALSO"
.sp
.if n .RS 4
.nf
get_double(3), get_float(3), get_int(3), get_long(3),
get_string(3), printf(3)
.fi
.if n .RE