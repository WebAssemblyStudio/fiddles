
/**
* to call a wasm function defined outside of AS from within AS, I guess
* we have declare it as an import. the function won't actually be an imported
* host function, because in gulpfile.js we splice the wat code and paste keccak-funcs.wat
* into the AssemblyScript output main.wat.
* then the keccak function will be declared twice (once as an import statement
* generated by AS, and a second time as the function def/wat code pasted in).
* so to make it valid again, gulpfile.js will find and delete the import statement
* put there by AS.
*/

@external("watimports", "$keccak")
export declare function keccak(ctx: i32, inputOffset: i32, inputLen: i32, outputOffset: i32): void;

/*
  (func $test_keccak (result i32)
    (call $keccak (i32.const 168) (i32.const 0) (i32.const 136) (i32.const 136))
    (return (i32.const 136))
  )

;; Main entry point is $KECCAK which has 4 parameters:
;; - context offset (i32) -> 616 bytes of context
;; - input offset (i32)
;; - input length (i32)
;; - output offset (i32) -> 32 byte hash

* test vector from https://github.com/axic/keccak-wasm/blob/master/test.wast
;; input (136 bytes of zeroes): 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; output (keccak-256): 3a5912a7c5faa06ee4fe906253e339467a9ce87d533c65be3c15cb231cdb25f9
*
*/


// hash should be bd47c4f9db488edbfab24643591aabab4ec3d104abf6235a361d41bdd3ca7f70
// length is 109

/*
var keccakCtx = new ArrayBuffer(650); // 616 should be sufficient
var keccakCtxBuf = changetype<usize>(keccakCtx);

// to hash 136 zero bytes like the test case
//var buff = new ArrayBuffer(136);
//var buffPtr = changetype<usize>(buff);

var hashOutput = new ArrayBuffer(32);
var hashOutputPtr = changetype<usize>(hashOutput);

//keccak(keccakCtxBuf, buffPtr, 136, hashOutputPtr);
keccak(keccakCtxBuf, input_data.dataStart, 109, hashOutputPtr);

var hashview = new DataView(hashOutput);
var hash = hashview.getUint32(0);
return hashOutputPtr;
*/
