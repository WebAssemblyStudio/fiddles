function process(): string {
  return "If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively. If you have not heard of WebAssembly yet, I greatly encourage you to read about it, but if you have, and you’ve played around with it, you might have noticed that passing some parameter types to/from the JavaScript side and the C++ side is currently limited or not straight-forward.  Arrays are one such parameter. With some work, you can still use the existing “array” parameter type, but even then, you are limited to using only Int8Array or Uint8Array, and returning an array is still an issue.  In this post, I will quickly go over the implementation details of a wrapper function around Module.ccall that makes array parameters just as easy to use as number parameters.  tl;dr - If you’re just here for the code, there’s a snippet with the end result at the bottom, as well as links to the repo and npm package, where it is tested and maintained.  Heap Before continuing, I must briefly mention the heap, and how it works.  Without going into too much detail, C++ uses the heap to store the dynamically allocated variables in its memory.  With WebAssembly, the C++ code does not have direct access to the heap, for security reasons, so instead, it uses equivalent JavaScript typed arrays. There are various typed arrays, for different value types matching the types used by C++ natively."
}

export function hello(): string {
  return process()
}

export function length(): i32 {
  return process().length
}
  