(module
  (import "Date" "now" (func $Date.now (result i32)))
  (global $state0 (mut i64) (i64.const 0))
  (global $state1 (mut i64) (i64.const 0))
  (func $murmurHash3 (param $h i64) (result i64)
    (set_local $h (i64.xor (get_local $h) (i64.shr_u (get_local $h) (i64.const 33))))
    (set_local $h (i64.mul (get_local $h) (i64.const -49064778989728563)))
    (set_local $h (i64.xor (get_local $h) (i64.shr_u (get_local $h) (i64.const 33))))
    (set_local $h (i64.mul (get_local $h) (i64.const -4265267296055464877)))
    (set_local $h (i64.xor (get_local $h) (i64.shr_u (get_local $h) (i64.const 33))))
    (get_local $h)
  )
  (func $setSeed (export "setSeed") (param $seed i32)
    (set_global $state0 (call $murmurHash3 (i64.extend_u/i32 (get_local $seed))))
    (set_global $state1 (call $murmurHash3 (i64.xor (get_global $state0) (i64.const -1))))
  )
  (func $start (local $seed i32) (local $now i32)
    (set_local $now (call $Date.now))
    (set_local $seed (i32.shl (get_local $now) (i32.const 24)))
    (set_local $seed (i32.xor (get_local $seed) (get_local $now)))
    (call $setSeed (get_local $seed))
  )
  (start $start)
  (func $random (export "random") (local $s1 i64) (local $s0 i64) (local $r i64) (result f64)
    (set_local $s1 (get_global $state0))
    (set_local $s0 (get_global $state1))
    (set_global $state0 (get_local $s0))
    (set_local $s1 (i64.xor (get_local $s1) (i64.shl (get_local $s1) (i64.const 23))))
    (set_local $s1 (i64.xor (get_local $s1) (i64.shr_u (get_local $s1) (i64.const 17))))
    (set_local $s1 (i64.xor (get_local $s1) (get_local $s0)))
    (set_local $s1 (i64.xor (get_local $s1) (i64.shr_u (get_local $s0) (i64.const 26))))
    (set_global $state1 (get_local $s1))
    (set_local $r (i64.or (i64.shr_u (get_local $s0) (i64.const 12)) (i64.const 4607182418800017408)))
    (f64.sub (f64.reinterpret/i64 (get_local $r)) (f64.const 1))
  )
)